// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package db

import (
	"context"
)

const checkFullNameAndMailID = `-- name: CheckFullNameAndMailID :execrows
select id, full_name, email, password, contact, user_type, created_at, updated_at from users
where email=$1 or full_name=$2
limit 1
`

type CheckFullNameAndMailIDParams struct {
	Email    string `json:"email"`
	FullName string `json:"full_name"`
}

func (q *Queries) CheckFullNameAndMailID(ctx context.Context, arg CheckFullNameAndMailIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, checkFullNameAndMailID, arg.Email, arg.FullName)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createNewUser = `-- name: CreateNewUser :one
insert into users (
    full_name,
    email,
    password,
    contact,
    user_type
) values (
    $1,$2,$3,$4,$5
) returning id, full_name, email, password, contact, user_type, created_at, updated_at
`

type CreateNewUserParams struct {
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Contact  string `json:"contact"`
	UserType string `json:"user_type"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.Contact,
		arg.UserType,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.Contact,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailOrContact = `-- name: GetUserByEmailOrContact :one
select id, full_name, email, password, contact, user_type, created_at, updated_at from users
where email=$1 or contact = $1
limit 1
`

func (q *Queries) GetUserByEmailOrContact(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrContact, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.Contact,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
